var accounts;
var account;
var AccountContract;
var IFB;
window.App = {
  start: function() {
    var self = this;
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert("There was an error fetching your accounts.");
        return;
      }
      if (accs.length == 0) {
        alert("Couldn't get any accounts! Make sure your Ethereum client is configured correctly.");
        return;
      }

      accounts = accs;
      account = accounts[0];
      web3.eth.defaultAccount= account;
        AccountContract = web3.eth.contract([{"constant":false,"inputs":[],"name":"GetCount","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"seller","type":"string"},{"name":"buyer","type":"string"},{"name":"investor","type":"string"},{"name":"cost","type":"uint256"},{"name":"status1","type":"string"}],"name":"addNewInvoice","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"CountNo","type":"uint8"},{"name":"seller","type":"string"},{"name":"investor","type":"string"},{"name":"status1","type":"string"}],"name":"updateInvoice","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"CountNo","type":"uint8"}],"name":"getInvoice","outputs":[{"name":"","type":"string"},{"name":"","type":"string"},{"name":"","type":"string"},{"name":"","type":"uint256"},{"name":"","type":"string"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}]);
        IFB = ("60606040526000600160006101000a81548160ff021916908360ff160217905550341561002b57600080fd5b5b610bd38061003b6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ab939711461005f578063858a30f01461008e578063a63c119b146101bd578063eda2e272146102ac575b600080fd5b341561006a57600080fd5b6100726104a8565b604051808260ff1660ff16815260200191505060405180910390f35b341561009957600080fd5b6101bb600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506104c0565b005b34156101c857600080fd5b6102aa600480803560ff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506105ff565b005b34156102b757600080fd5b6102d0600480803560ff169060200190919050506106aa565b604051808060200180602001806020018881526020018060200187815260200186815260200185810385528c818151815260200191508051906020019080838360005b8381101561032f5780820151818401525b602081019050610313565b50505050905090810190601f16801561035c5780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b838110156103965780820151818401525b60208101905061037a565b50505050905090810190601f1680156103c35780820380516001836020036101000a031916815260200191505b5085810383528a818151815260200191508051906020019080838360005b838110156103fd5780820151818401525b6020810190506103e1565b50505050905090810190601f16801561042a5780820380516001836020036101000a031916815260200191505b50858103825288818151815260200191508051906020019080838360005b838110156104645780820151818401525b602081019050610448565b50505050905090810190601f1680156104915780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b6000600160009054906101000a900460ff1690505b90565b6104c8610a04565b85816000018190525084816020018190525083816040018190525082816060018181525050818160800181905250428160a0018181525050428160c001818152505080600080600160009054906101000a900460ff1660ff168152602001908152602001600020600082015181600001908051906020019061054b929190610a5a565b506020820151816001019080519060200190610568929190610a5a565b506040820151816002019080519060200190610585929190610a5a565b506060820151816003015560808201518160040190805190602001906105ac929190610a5a565b5060a0820151816005015560c082015181600601559050506001600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550505b505050505050565b826000808660ff168152602001908152602001600020600001908051906020019061062b929190610ada565b50816000808660ff1681526020019081526020016000206002019080519060200190610658929190610ada565b50806000808660ff1681526020019081526020016000206004019080519060200190610685929190610ada565b50426000808660ff168152602001908152602001600020600601819055505b50505050565b6106b2610b5a565b6106ba610b5a565b6106c2610b5a565b60006106cc610b5a565b6000806000808960ff1681526020019081526020016000206000016000808a60ff1681526020019081526020016000206001016000808b60ff1681526020019081526020016000206002016000808c60ff168152602001908152602001600020600301546000808d60ff1681526020019081526020016000206004016000808e60ff168152602001908152602001600020600501546000808f60ff16815260200190815260200160002060060154868054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561080f5780601f106107e45761010080835404028352916020019161080f565b820191906000526020600020905b8154815290600101906020018083116107f257829003601f168201915b50505050509650858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ab5780601f10610880576101008083540402835291602001916108ab565b820191906000526020600020905b81548152906001019060200180831161088e57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109475780601f1061091c57610100808354040283529160200191610947565b820191906000526020600020905b81548152906001019060200180831161092a57829003601f168201915b50505050509450828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109e35780601f106109b8576101008083540402835291602001916109e3565b820191906000526020600020905b8154815290600101906020018083116109c657829003601f168201915b5050505050925096509650965096509650965096505b919395979092949650565b60e060405190810160405280610a18610b6e565b8152602001610a25610b6e565b8152602001610a32610b6e565b815260200160008152602001610a46610b6e565b815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a9b57805160ff1916838001178555610ac9565b82800160010185558215610ac9579182015b82811115610ac8578251825591602001919060010190610aad565b5b509050610ad69190610b82565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b1b57805160ff1916838001178555610b49565b82800160010185558215610b49579182015b82811115610b48578251825591602001919060010190610b2d565b5b509050610b569190610b82565b5090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b610ba491905b80821115610ba0576000816000905550600101610b88565b5090565b905600a165627a7a72305820db66bf5339c82ffc70d64d1359f8ac55f3994b870fe5434cf7bfbba1bfa0e6960029");    
    });
  },
    createContract: function()
  {
    AccountContract.new("", {from:account, data: IFB, gas: 3000000}, function (error, deployedContract){
      if(deployedContract.address)
      {
        document.getElementById("contractAddress").value=deployedContract.address;
      }
    })
  },
  addNewInvoice: function()
  {
    var contractAddress = document.getElementById("contractAddress").value;
    var deployedAccount = AccountContract.at(contractAddress);
    var seller = document.getElementById("seller").value;
    var buyer = document.getElementById("buyer").value;
	var investor = document.getElementById("investor").value;
    var cost = document.getElementById("cost").value;  
	var status1 = document.getElementById("status1").value;	
    deployedAccount.addNewInvoice(seller, buyer, investor, cost, status1, function(error, response){
    console.log(error);	
	document.getElementById("res").value = response;											 	 	  
    })
  }
    
};
window.addEventListener('load', function() {
  if (typeof web3 !== 'undefined') {
    console.warn("Using web3 detected from external source.  If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask")
    window.web3 = new Web3(web3.currentProvider);
  } else {
    console.warn("No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask");
    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
    window.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
  }
  App.start();
});
